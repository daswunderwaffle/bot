функции в api:

	запросить задание 
		1 аргумент (необязательный): 
			значение по умолчанию (0) - случайное задание
			число [1, 27] - номер задания в КИМе
			строка - категория
		2 аргумент (необязательный):
			значение по умолчанию (0) - при использовании в сервисах без учета пользователя
			число - id ВКонтакте (или в телеге какой-нибудь)
			
	запросить решение
		1 аргумент (обязательный):
			id задания в БД
		2 аргумент (необязательный):
			значение по умолчанию (0) - при использовании в сервисах без учета пользователя
			число - id ВКонтакте (или в телеге какой-нибудь)
			
	запросить ответ (по id задания)
		1 аргумент (обязательный):
			id задания в БД
		2 аргумент (необязательный):
			значение по умолчанию (0) - при использовании в сервисах без учета пользователя
			число - id ВКонтакте (или в телеге какой-нибудь)
			
	проверить ответ (по id задания)
		1 аргумент (обязательный):
			id задания в БД
		2 аргумент (обязательный):
			ответ пользователя
		3 аргумент (необязательный):
			значение по умолчанию (0) - при использовании в сервисах без учета пользователя
			число - id ВКонтакте (или в телеге какой-нибудь)
			
	установить удобный вид ресурсов
		1 аргумент (обязательный):
			id пользователя
		2 аргумент (обязательный):
			вид ресурса
	
	запросить справку и категории

// ЗАПРОС ЗАДАНИЯ
getProblem()
	IN json:
	{
		"type":
		{
			"type": "string",
			"description": "if type is default (0), gets random problem; 
					if type is an integer in range [1, 27], gets a problem by its number in exam variant; 
					if type is a string, gets a problem by its category"
		},
		"user_id":
		{
			"type": "integer",
			"description": "contains ID of the user, who requested a task (VK, Telegram...);
					otherwise default (0)" 
		},
		"API version":
		{
			"type": "string",
			"description": "do you need one?"
		}
	}
	
	OUT json:
	{
		"success":
		{
			"type": "boolean",
			"description": "true if method worked without errors; otherwise false"
		},
		"error":
		{
			"code":
			{
				"type": "integer"
			},
			"message":
			{
				"type": "string"
			}
		},
		"data":
		[
			"type": "array",
			"description": "contains resource items (images, links, texts, etc)			
		]
	}

// ЗАПРОС РЕШЕНИЯ
getSolution()
	IN json:
	{
		"problem_id":
		{
			"type": "integer",
			"description": "contains ID of a problem"
		},
		"user_id":
		{
			"type": "integer",
			"description": "contains ID of the user, who requested a solution (VK, Telegram...);
					otherwise default (0);" 
		}
		"API version":
		{
			"type": "string",
			"description": "do you need one?"
		}
	}
	OUT json:
	{
		"success":
		{
			"type": "boolean",
			"description": "true if method worked without errors; otherwise false"
		},
		"error":
		{
			"code":
			{
				"type": "integer"
			},
			"message":
			{
				"type": "string"
			}
		},
		"data":
		[
			"type": "array",
			"description": "contains resource items (images, links, texts, etc)			
		]
	}

// ЗАПРОС ОТВЕТА
getAnswer()
	IN json:
	{
		"problem_id":
		{
			"type": "integer",
			"description": "contains ID of a problem"
		},
		"user_id":
		{
			"type": "integer",
			"description": "contains ID of the user, who requested an answer (VK, Telegram...);
					otherwise default (0);" 
		}
		"API version":
		{
			"type": "string",
			"description": "do you need one?"
		}
	}
	OUT json:
	{
		"success":
		{
			"type": "boolean",
			"description": "true if method worked without errors; otherwise false"
		},
		"error":
		{
			"code":
			{
				"type": "integer"
			},
			"message":
			{
				"type": "string"
			}
		},
		"answer":
		{
                	"type": "string",
		    	"description": "correct answer"
		}
	}

// ПРОВЕРКА ОТВЕТА
checkAnswer()
	IN json:
	{
		"problem_id":
		{
			"type": "integer",
			"description": "contains ID of a problem"
		},
		"answer":
		{
			"type": "integer",
			"description": "user's answer"
		}
		"user_id":
		{
			"type": "integer",
			"description": "contains ID of the user, who requested a checkup (VK, Telegram...);
					otherwise default (0);" 
		}
		"API version":
		{
			"type": "string",
			"description": "do you need one?"
		}
	}
	OUT json:
	{
		"success":
		{
			"type": "boolean",
			"description": "true if method worked without errors; otherwise false"
		},
		"error":
		{
			"code":
			{
				"type": "integer"
			},
			"message":
			{
				"type": "string"
			}
		},
		"result":
		{
			"type": "boolean",
			"description": "contains true if the right answer was given, otherwise false"
		}
	}
	
// ПОСЛЕДНИЕ НАЗНАЧЕНИЯ
getAssignments()
	IN json:
	{
		"user_id":
		{
			"type": "integer",
			"description": "ID of the user, whose assignments you need"
		},
		"since":
		{
			"type": "integer".
			"description": "timestamp as a left border of a time span"
		}
		"until":
		{
			"type": "integer",
			"description": "timestamp as a right border of a time span"
		}
		
	}
	OUT json:
	{
		"success":
		{
			"type": "boolean",
			"description": "true if method worked without errors; otherwise false"
		},
		"error":
		{
			"code":
			{
				"type": "integer"
			},
			"message":
			{
				"type": "string"
			}
		}
		"data":
		[
			// is amount of returned objects essential here?
			"assignmentsCount":
			{
				"type": "integer",
				"description": "contains amount of returned resource items"
			},
			////////////
			"id":
			{
				"type": "integer",
				"description": "ID of a record in table assignments"
			},
			"user_id":
			{
				"type": "integer",
				"description": "ID of a user in current assignment"
			},
			"problem_id":
			{
				"type": "integer",
				"description": "ID of a problem in current assignment"
			}
			"assigned":
			{
				"type": "integer",
				"description": "contains a timestamp of current assignment"
			}
		]		
	}

setPreferredResource()
	IN json:
	{
		"user_id":
		{
			"type": "integer",
			"description": "ID of the user, whose assignments you need"
		},
		"resource_type_name":
		{
			"type": "string",
			"description": "name of preferred resource type (text, link, image etc.)"
		}
	}
	OUT json:
	{
		"success":
		{
			"type": "boolean",
			"description": "true if method worked without errors; otherwise false"
		},
		"error":
		{
			"code":
			{
				"type": "integer"
			},
			"message":
			{
				"type": "string"
			}
		}
	}
